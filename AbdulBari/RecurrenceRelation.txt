�ncellikle Binary Searche ba�lamadan bilmemiz gereken ili�ki.
Recurrence Relation

1-)T(n) = T(n-1) + n ili�kisi

�rnek olarak bir C kodunu Ele alal�m.

void Test(int n) {														T(n) Dersek S�ras�yla

		if(n>0)															1
		{							
			for (i=0; i < n ; i++)												n+1
			{
				print("%d",n)											n
			
			}
			Test(n-1)  Buradaki kod blo�u rek�rsifli�i sa�layacak		T(n-1)
		
		}																T(n) = T(n-1)+2n+2 elde etmi� olaca��z
	
																		G�r�ld��� �zere bu �ekilde bu soruyu ��zmeye �al���rsak bize zorluk ��karacakt�r.		
}																		O y�zden 2n+2 nin asimptotik rotasyonunu al�yoruz ve bunun anlam� (2n+2) n oluyor.
																		T(n)=T(n-1)+n
T(n)=T(n-1)+n
		{	1   n=0
T(n) =	{
		{	T(n-1)+n n>0

		T(n)------------------------------n									
		/	\
	  n	    T(n-1)------------------------n-1
			/	\
		  n-1	 T(n-2)--------------------n-2
					.....----------------- .....				n+n-1+n-2+n-3+.....+2+1+0= n*(n+1)/2	
						T(2)----------------2
						/	\
						2	T(1)------------1
							/	\
							1	 T(0)-------0					T(n)=n*(n+1)/2
									\							O(n^2)+O(n)
									Does nothing.				------------	= O(n^2)
																	


2-) T(n)= T(n-1)+ logn �li�kisi

	void Test(int n):										T(n)
	{
			if(n>0){											1
			
				for(i=1; i<n; i=i*2){							
						print("%d",i)							log n 
				}
				Test(n-1)										T(n-1)
			
			}												T(n)=T(n-1)+logn+1
																Yukarda a��klanan sebeplerden	+1 i g�zden gelelim
	}														T(n)=T(n-1)+logn


		{	1   n=0
T(n) =	{
		{	T(n-1)+logn n>0
		
		T(n)------------------------------n									
		/	\
	  logn    T(n-1)------------------------n-1
			/	\
	log(n-1) 	 T(n-2)--------------------n-2
					.....----------------- .....				
						T(2)----------------2
						/	\
					log2	T(1)------------1
							/	\
						log1	 T(0)-------0					
									\							
									Does nothing.				
Logn+log(n-1)+log(n-2)+.....+log2+log1
	log(n*(n-1)*(n-2)*......*2*1)=log(n!)------>O(nlogn)
	Yapt���m�z �� �rnekten yola ��karak (di�er �rnek basit oldu�u i�in yazmad�m)
	T(n)=T(n-1)+1
	T(n)=T(n-1)+n			Burada T(n-k) ba� kat say�s� de�i�memek �art�yla ��yle k�sa bir kural olu�turabiliriz.
	T(n)=T(n-1)+logn		1-) O(n*1)  2-)O(n*n) 3-)O(n*logn) 

	Peki e�er T(n)=T(n-2)+1 olsayd�? bu sefer ad�mlar tek tek ger�ekle�mek yerine iki�er iki�er ger�ekle�ecek n/2, ama yinede O(n)

	Evet �imdi ba�katsay�s� 1 olmayan fonksiyonlar� ele alal�m.


3-) T(n) = 2 T(n-1) + 1

	void Test(int n):													T(n)					
	{
			if(n>0){													1
			
				print("%d",i)											1
				Test(n-1)												T(n-1)
				Test(n-1)												T(n-1)
			}												
																
	}																T(n) = 2T(n-1)+2
																	Yukar�daki a��klama yine
																	T(n)=2T(n-1)+1

T(n)=2T(n-1)+1
		{	1   n=0
T(n) =	{
		{	2T(n-1)+1 n>0

				T(n)								1		
		/		\			\
	  1     T(n-1)			    T(n-1)				2s
			/	\	  \	        /	 \	  \
			1	T(n-2) T(n-2)  1	T(n-2) T(n-2)	4			1+2+2^2+2^3+........+2^k= a(1-r^(n+1))/1-r
					.....----------------- .....									r =2 	1-2^(k+1)/-1			
					..............................  8										2^(k+1)-1
					...............................											Let's assume k=n
					T(0) T(0) T(0) T(0) T(0)		2^n										2^(n+1)-1 -> O(2^n)
					

Master Metod ile Decreasing Functions

T(n)=T(n-1)+1   O(n)
T(n)=T(n-1)+n	O(n^2)		
T(n)=T(n-1)+logn O(nlogn)
T(n)=2T(n-1)+1-> O(2^n)                     Evet g�r�ld��� �zere anlam��s�nd�r.
T(n)=3T(n-1)+1->O(3^n)				
T(n)=2T(n-1)+n-> O(n*2^n)
T(n)=aT(n-b)+c -> if a>0 b>0 and c=O(n^k) where k>=0 O(n*c)
				  if a>1 b>0 and c=O(n^k) where k>=0 O(a^(n/b)*n*c)
				  if a<1 b>0 and c=O(n^k) where k>=0 O(c)

B-> Dividing Functions
1->T(n) = T(n/2) +1 

void Test(int n):													T(n)					
	{
			if(n>1){													1
			
				print("%d",i)											1
				Test(n/2)											T(n/2)
																			
			}														T(n)=T(n/2)+1
																
	}	

		{	1   n=1
T(n) =	{
		{	T(n/2)+1 n>1


	T(n)--------------------------1
	/	\
	1    T(n/2)--------------------1
		/		\		
		1		T(n/(2^2))---------1
				/		\		
				1		T(n/(2^3))--1					K defa bu i�lem ger�ekle�ecektir o zaman (1+1+........1) =K
				--------------*******																{ K defa}
				-------------******
						  T(2)------1							Sondaki i�lemimiz i�in
						/		\								n/2^k = 1
						1        T(1)=T(n/2^k)					n=2^k
									Does nothing				k=log n      G�r�ld��� �zere K de�erimiz log n
																	 2										2
																		O y�zden O(logn) olur.

�uan bu i�lem biraz fazla zaman�m� al�yor o y�zden yukardaki mant��� anlad���m� d���n�yorum.
Bundan sonras� i�in videoyu izleyece�im.
Master Teoremi en sonda yazaca��m.

Videolardan �unlar� ��rendik
T(n) = aT(n/b)+f(n)
a>=1   f(n) = O(n^k*(log^p(n)))
b>1    
�ki �eye ihtiyac�m�z olacak Log a  ve k ye
							   b
Birinci Durum: E�er log  a> k ise cevap O(n^log a)
						b					  b
�kinci Durum:  E�er log  a = k ise 
						b		
							 Alt Durum:
								E�er p>-1  Cevap O(n^klog^(p+1)n)
								E�er p=-1   Cevap O(n^kloglogn)
								E�er p<-1   cevap O(n^k)
���nc� Durum:  E�er log  a < k ise 
						b
						 Alt Durum:
								E�er p=>0  Cevap O(n^klog^(p)n)
								E�er p<0   Cevap O(n^k)



�rnek= 1-)T(n)=2T(n/2)+1
		a=2
		b=2
		f(n)=1->n^0*log^(0)n
			�ncelikle k ya bak�yoruz. k=0 
			sonra log a ya yani log  2 = 1
					 b				2
								1>0
								o zaman case 1:
									O(n^log a) = O(n)
										   b


�imdi Root Function i�in bakal�m.
T(n)=T(n^(1/2)) + 1
void Test(int n):														T(n)					
	{
			if(n>2){													1
			
				stud;										1
				Test(n^(1/2))											T(n^(1/2))
																			
			}														T(n)=T(n^(1/2))+1
																
	}	
	
	
		{	1     n=2
T(n) =	{
		{	T(n^(1/2))+1 n>2

		Gerekli substitue kural� uygulanarak elde edilen sonu�
		O(loglog n)
		        2

